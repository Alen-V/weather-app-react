[{"C:\\Users\\alenv\\OneDrive\\Documents\\Code\\Projects\\weather-app-react\\src\\index.js":"1","C:\\Users\\alenv\\OneDrive\\Documents\\Code\\Projects\\weather-app-react\\src\\App.js":"2","C:\\Users\\alenv\\OneDrive\\Documents\\Code\\Projects\\weather-app-react\\src\\reportWebVitals.js":"3","C:\\Users\\alenv\\OneDrive\\Documents\\Code\\Projects\\weather-app-react\\src\\components\\header\\header.jsx":"4","C:\\Users\\alenv\\OneDrive\\Documents\\Code\\Projects\\weather-app-react\\src\\components\\pages\\pages.jsx":"5"},{"size":517,"mtime":1630165180984,"results":"6","hashOfConfig":"7"},{"size":7795,"mtime":1630255650257,"results":"8","hashOfConfig":"7"},{"size":375,"mtime":1630165180985,"results":"9","hashOfConfig":"7"},{"size":2098,"mtime":1630250202809,"results":"10","hashOfConfig":"7"},{"size":7568,"mtime":1630248111836,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1dv0lie",{"filePath":"15","messages":"16","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17","usedDeprecatedRules":"14"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"14"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"C:\\Users\\alenv\\OneDrive\\Documents\\Code\\Projects\\weather-app-react\\src\\index.js",[],["26","27"],"C:\\Users\\alenv\\OneDrive\\Documents\\Code\\Projects\\weather-app-react\\src\\App.js",["28","29","30","31","32","33","34"],"import React, { Component } from \"react\"\r\nimport $, { cssNumber } from 'jquery'\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Header from './components/header/header.jsx'\r\nimport Pages from './components/pages/pages.jsx'\r\n\r\nclass HoursDataConstructor {\r\n  constructor( date, hour, main, weather, wind, visibility ) {\r\n      this.weather = {\r\n        date: date,\r\n        hour: hour,\r\n        temperature: {\r\n          currentTemp: main.temp,\r\n          minTemp: main.temp_min,\r\n          maxTemp: main.temp_max,\r\n          measureUnit: 'Â°C'\r\n        },\r\n        feelsLike: {\r\n          feelValue: main.feels_like,\r\n          measureUnit: 'Kelvin'\r\n        },\r\n        humidity: {\r\n          humidityValue: main.humidity,\r\n          measureUnit: '%'\r\n        },\r\n        pressure: {\r\n          pressureValue: main.pressure,\r\n          measureUnit: 'hPa'\r\n        },\r\n        wind: {\r\n          windValue: wind.speed,\r\n          measureUnit: 'm/s'\r\n        },\r\n        visibility: {\r\n          visibilityValue: visibility\r\n        },\r\n        weather: weather\r\n      };\r\n  }\r\n}\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      pages: ['statistics', 'cards', 'data', 'about'],\r\n      numOfPages: 4,\r\n      pageActive: 3,\r\n      dataLoaded: false,\r\n      pageLoaded: false,\r\n      cityData: {},\r\n      data: [],\r\n      listData: [],\r\n      days: [],\r\n      dataUpdate: [],\r\n      dates: [],\r\n      width: window.innerWidth\r\n    }\r\n    window.addEventListener('resize', () => {\r\n      this.setState({\r\n        width: window.innerWidth\r\n      })\r\n    })\r\n  };\r\n  setPage = (page) => {\r\n    this.setState({\r\n      pageLoaded: false,\r\n      pageActive: (page + 1)\r\n    })\r\n    setTimeout(() => {\r\n      this.setState({\r\n        pageLoaded: true\r\n      })\r\n    }, 300);\r\n  }\r\n  componentDidMount = async () => {\r\n    // window.addEventListener('resize', () => this.setState({width: window.innerWidth}))\r\n    try {\r\n        await this.weatherDataCall('skopje')\r\n        } catch(err) {\r\n        console.log(err)\r\n    }\r\n  }\r\n\r\n  weatherDataCall = (city) => {\r\n    let currentTime = new Date()\r\n    let daysTime = this.printDates(5)\r\n    let listData, days, data;\r\n    currentTime = currentTime.toString().split(' ')[4]\r\n          this.setState({\r\n            dataLoaded: false\r\n          }, async () => {\r\n            await this.fetchData(city)\r\n            .then((dataX) => {\r\n              listData = this.filterDays(dataX.list)\r\n              days = this.eliminateDuplicates(listData)\r\n              data = this.filterData(listData, days)\r\n              this.setState({\r\n                cityData: dataX.city,\r\n                listData: listData,\r\n                days: days,\r\n                data: data,\r\n                dataUpdate: currentTime,\r\n                dates: daysTime,\r\n                pageLoaded: true\r\n              })\r\n              setTimeout(() => {\r\n                this.setState({\r\n                  dataLoaded: true\r\n                })\r\n              }, 100);\r\n          }).catch(err => {\r\n            alert(\"Please input a valid city!\")\r\n            setTimeout(() => {\r\n              this.setState({\r\n                dataLoaded: true\r\n              })\r\n            }, 100);\r\n          })\r\n        })\r\n    }\r\n  \r\n  fetchData = async (city) => {\r\n    let oldWeatherApi = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&units=metric&APPID=814e138461b0f6b9423de687beb9ff3e`\r\n    let newWeatherApi = `http://api.weatherapi.com/v1/forecast.json?key=e9ff8cb3a35840cfa1d103610211702&q&q=${city}&days=10`\r\n    let call = await fetch(oldWeatherApi)\r\n    let data = await call.json()\r\n    return data\r\n  }\r\n\r\n  filterDays(days) {\r\n    let listData = [];\r\n    let date;\r\n    let hour;\r\n    let newDay\r\n    for (let day of days) {\r\n        date = `${day.dt_txt.split('-')[2].split(' ')[0]}.${day.dt_txt.split('-')[1].split(' ')[0]}`\r\n        hour = `${day.dt_txt.split('-')[2].split(' ')[1].slice(0,5)}`\r\n        newDay = new HoursDataConstructor(date, hour, day.main, day.weather, day.wind, day.visibility)\r\n        listData.push(newDay)\r\n    }\r\n    return listData\r\n  }\r\n  eliminateDuplicates(array) {\r\n    let i,\r\n        length = array.length,\r\n        outArray = [],\r\n        object = [];\r\n    for (i = 0; i < length; i++) {\r\n        object[array[i].weather.date] = 0;\r\n    }\r\n    for (i in object) {\r\n      outArray.push(i);\r\n    }\r\n    if(outArray.length > 5) outArray.pop()\r\n    return outArray;\r\n  }\r\n\r\n  clearInput(input, secondInput){\r\n    input.value = ``;\r\n        if(secondInput === undefined){\r\n            return\r\n        }else{\r\n            secondInput.innerHTML = ``\r\n        }\r\n  }\r\n\r\n  printDates(limit) {\r\n    let daysTime = []\r\n    for (let i = 0; i < limit; i++) {\r\n      let tomorrow = new Date()\r\n      tomorrow.setDate(tomorrow.getDate() + i)\r\n      tomorrow = tomorrow.toString().split(' ')[0]\r\n      daysTime.push(tomorrow)\r\n    }\r\n    return daysTime\r\n  }\r\n\r\n  filterData(listData, filterDate) {\r\n    let filterStats = []\r\n    let averageStats = []\r\n    for (let i = 0; i < 5; i++) {\r\n      listData.map((data) => {\r\n          if(data.weather.date === filterDate[i]) {\r\n              if(filterStats.length === i + 1) {\r\n                filterStats[i].push([data.weather])\r\n              } else {\r\n                filterStats.push([[data.weather]])\r\n              }\r\n          }\r\n      })\r\n      if(i === 4) {\r\n          this.dailyStats(filterStats[1], averageStats, 'temperature','currentTemp')\r\n          this.dailyStats(filterStats[1], averageStats, 'humidity','humidityValue')\r\n          this.dailyStats(filterStats[1], averageStats, 'wind','windValue')\r\n      }\r\n  }\r\n    return filterStats\r\n  }\r\n  dailyStats(statsFilter, array, object,stat) {\r\n    let statsArray = []\r\n    statsFilter.map((arrayFilter) => {\r\n        let average = 0;\r\n        arrayFilter.map((stats) => {\r\n            average += stats[object][stat]\r\n        })\r\n        if ( object === 1 ){\r\n            statsArray.push(Math.ceil([average / arrayFilter.length]))\r\n        } else {\r\n            statsArray.push(Math.round([average / arrayFilter.length]))\r\n        }\r\n    })\r\n    array.push(statsArray)\r\n}\r\n\r\nrender() {\r\n  const {\r\n    pages,\r\n    numOfPages,\r\n    pageActive,\r\n    dataLoaded,\r\n    pageLoaded,\r\n    cityData,\r\n    data,\r\n    listData,\r\n    days,\r\n    dataUpdate,\r\n    dates,\r\n    width\r\n  } = this.state;\r\n  const loader = (\r\n    <div class=\"loader-container action-loading d-none\" id=\"action-loading\">\r\n      <div class=\"loading-container\">\r\n        <div class=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n      </div>\r\n    </div>\r\n  )\r\n  if(!dataLoaded) {\r\n    return ( loader )\r\n  } else {\r\n    const content = (\r\n      <div className=\"content\">\r\n        <Header\r\n          pages={pages}\r\n          numOfPages={numOfPages}\r\n          pageActive={pageActive}\r\n          listData={listData}\r\n          days={days}\r\n          width={width}\r\n          setPage={this.setPage}\r\n          dataCall={this.weatherDataCall}\r\n        />\r\n        <Pages\r\n          pages={pages}\r\n          numOfPages={numOfPages}\r\n          pageActive={pageActive}\r\n          cityId={cityData.id}\r\n          cityName={cityData.name}\r\n          sunrise={cityData.sunrise}\r\n          sunset={cityData.sunset}\r\n          currentTemp={listData[0].weather.temperature.currentTemp}\r\n          measureUnit={listData[0].weather.temperature.measureUnit}\r\n          weatherDescription={listData[0].weather.weather[0].description}\r\n          data={data}\r\n          listData={listData}\r\n          days={days}\r\n          dataUpdate={dataUpdate}\r\n          dates={dates}\r\n          pageLoaded={pageLoaded}\r\n          width={width}\r\n        />\r\n      </div>\r\n  )\r\n  return content\r\n  }\r\n}\r\n}\r\n\r\nexport default App;\r\n","C:\\Users\\alenv\\OneDrive\\Documents\\Code\\Projects\\weather-app-react\\src\\reportWebVitals.js",[],"C:\\Users\\alenv\\OneDrive\\Documents\\Code\\Projects\\weather-app-react\\src\\components\\header\\header.jsx",["35"],"import { React, useState } from 'react'\r\nimport \"./header.css\";\r\n\r\nconst Header = (props) => {\r\n    const { pages, numOfPages, pageActive, listData, days, width } = props\r\n    const [dropdown, setDropdown] = useState(false)\r\n    let setPage = (index) => {\r\n      if(props.setPage) {\r\n        toggleDropdownMenu()\r\n        props.setPage(index)\r\n      }\r\n    }\r\n\r\n    const toggleDropdownMenu = () => {\r\n      setDropdown(!dropdown)\r\n    }\r\n\r\n    const getCityInfo = (event) => {\r\n      if( event.keyCode === 13) {\r\n        props.dataCall(event.target.value, days, listData)\r\n      }\r\n    }\r\n\r\n    const items = pages.map((page, index) => (\r\n      <div\r\n      className={(index + 1) === pageActive ? 'navbar-item active-item' : 'navbar-item'}\r\n      onClick={() => setPage(index)}\r\n      key={index}\r\n      >\r\n        {page}\r\n      </div>\r\n    ))\r\n    const searchContainer = (\r\n      <div className=\"search-container\">\r\n        <form onKeyDown={(e) => {getCityInfo(e)}}>\r\n          <input type=\"search\" placeholder=\"Search City\"></input>\r\n        </form>\r\n      </div>\r\n  )\r\n        \r\n    const navbarContainerLeft = (\r\n        <div className=\"navbar-container-left\">\r\n          <div className=\"navbar-logo\">\r\n            <span>A-CODE Weather</span>\r\n            {width > 992 ? null : <div className={`dropdown-btn ${dropdown ? 'expanded' : \"\"}`} onClick={() => toggleDropdownMenu()}>\r\n              {<i class=\"fas fa-caret-down\"></i>}\r\n            </div>}\r\n          </div>\r\n            {width > 992 ?\r\n              <div className=\"navbar-items\">\r\n                {items}\r\n              </div> :\r\n              <div className={`nav-dropdown-menu ${dropdown ? 'expanded' : \"\"}`}>\r\n                {searchContainer}\r\n                {items}\r\n              </div>}\r\n        </div>\r\n    )\r\n    \r\n    const navbarContainer = (\r\n        <div className=\"navbar-container\">\r\n            {navbarContainerLeft}\r\n            {width > 992 ? searchContainer : null}\r\n        </div>\r\n    )\r\n    return  <div className=\"navbar\">\r\n                {navbarContainer}\r\n            </div>\r\n}\r\n\r\nexport default Header;","C:\\Users\\alenv\\OneDrive\\Documents\\Code\\Projects\\weather-app-react\\src\\components\\pages\\pages.jsx",["36","37","38","39","40","41"],"import React from 'react'\r\nimport \"./pages.css\"\r\n\r\nconst Pages = (props) => {\r\n    const { pages,\r\n            pageActive,\r\n            cityName,\r\n            cityId,\r\n            listData,\r\n            days,\r\n            dataUpdate,\r\n            data,\r\n            weatherDescription,\r\n            currentTemp,\r\n            measureUnit,\r\n            sunrise,\r\n            sunset,\r\n            pageLoaded,\r\n            width\r\n        } = props\r\n    let counter = 0;\r\n    let pageInfo = null\r\n    let dayImage;\r\n    let nightImage;\r\n    const windImage = require(`../../assets/img/wind.svg`).default;\r\n    const humidityImage = require(`../../assets/img/humidity.svg`).default;\r\n    const sunriseImage = require(`../../assets/img/sunrise.jpg`).default;\r\n    const sunsetImage = require(`../../assets/img/sunset.jpg`).default;\r\n    let sunRise = new Date(sunrise * 1000)\r\n    let sunSet = new Date(sunset * 1000)\r\n    const sunriseEl = (\r\n        <div className=\"sun-data sunrise\">\r\n            <img src={sunriseImage} alt=\"\"/>\r\n            <div className=\"info-container\">\r\n                <span>Sunrise</span>\r\n                <span>\r\n                    {sunRise.toString().split(' ')[4]}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const sunsetEl = (\r\n        <div className=\"sun-data sunset\">\r\n            <img src={sunsetImage} alt=\"\"/>\r\n            <div className=\"info-container\">\r\n                <span>Sunset</span>\r\n                <span>\r\n                    {sunSet.toString().split(' ')[4]}\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n    let statisticsCard = days.map((date, index) => {\r\n        dayImage = require(`../../assets/img/day/${data[index][0][0].weather[0].description.replace(' ', '_')}.png`).default\r\n        nightImage = require(`../../assets/img/night/${data[index][0][0].weather[0].description.replace(' ', '_')}.png`).default\r\n        let cards = (\r\n            <div className=\"card\"\r\n                key={index}\r\n            >\r\n                <div className=\"weather-description\">\r\n                    <img src={dayImage} alt=\"\"/>\r\n                    <div className={'weather-day-info'}>\r\n                        <span className=\"degrees\">{Math.floor(data[index][0][0].temperature.currentTemp * 10) / 10}{measureUnit}</span>\r\n                        <span className=\"weather-condition\">{data[index][0][0].weather[0].description}</span>\r\n                        <span>{date}</span>\r\n                    </div>\r\n                </div>\r\n                <div className={index === 0 ? 'weather-extra-info active-info' : 'weather-extra-info'}>\r\n                    <span>{cityName}</span>\r\n                    <div className={'extra-info'}>\r\n                      <div><img src={windImage} alt=\"\"/>{data[index][0][0].wind.windValue}{data[index][0][0].wind.measureUnit}</div>\r\n                      <div><img src={humidityImage} alt=\"\"/>{data[index][0][0].humidity.humidityValue}{data[index][0][0].humidity.measureUnit}</div>\r\n                    </div>\r\n                    <div className={'extra-info'}>\r\n                        {sunriseEl}\r\n                        {sunsetEl}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n        return cards\r\n    })\r\n\r\n    let cards = (\r\n        <div className=\"cards-information\">\r\n            <div className=\"card major-card control-card\">\r\n                {statisticsCard[0]}\r\n            </div>\r\n            <div className=\"minor-cards card-control\">\r\n                {statisticsCard.map((element, index) => {\r\n                    return index !== 0 ? element : null\r\n                })}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const hourMainCard = (\r\n        <div className=\"current-weather\">\r\n            <span>Current Weather</span>\r\n            <span className=\"city-name\">{cityName}</span>\r\n            <div className=\"current-weather-info active-info\">\r\n                <img src={dayImage} alt=\"\"/>\r\n                <span className=\"temp\">{Math.floor(currentTemp * 10) / 10}{measureUnit}</span>\r\n                <span>{weatherDescription}</span>\r\n            </div>\r\n        </div>\r\n    )\r\n    const minorCard = (count) => data.map((element, index) => {\r\n        let header = element.map((head, indexEl) => {\r\n            if( counter < count ) {\r\n                let headerEl = indexEl === 0 ? (\r\n                    <div className=\"card-header\">\r\n                        {days[index]}\r\n                    </div>\r\n                ) : null;\r\n                \r\n                let cardEl = (\r\n                    <div className=\"hour-card\">\r\n                        <div className=\"temp-details\">\r\n                            <span className=\"hour\">{head[0].hour}</span>\r\n                            <div className=\"temp-container\">\r\n                                <span className=\"temp\">{head[0].temperature.currentTemp}</span>\r\n                                <span className=\"degrees\">{head[0].temperature.measureUnit}</span>\r\n                            </div>\r\n                        </div>\r\n                        <span className=\"description\">\r\n                            {<i class=\"fas fa-caret-down\"></i>}\r\n                        </span>\r\n                    </div>          \r\n                );\r\n                    cardEl = indexEl === 0 ? (\r\n                        <div className=\"data-list\">\r\n                            {headerEl}\r\n                            {cardEl}\r\n                        </div>\r\n                    ) : (\r\n                        <div className=\"data-list\">\r\n                            {cardEl}\r\n                        </div>\r\n                        )\r\n                    counter++\r\n                return cardEl\r\n            } else  {\r\n                return\r\n            };\r\n        })\r\n        return header\r\n    })\r\n\r\n    switch (pageActive) {\r\n        case 1:\r\n            pageInfo = (\r\n                cards\r\n            )\r\n            break;\r\n        case 2: \r\n            pageInfo = (\r\n                <div className=\"hour-cards\">\r\n                    <div className=\"left-side\">\r\n                        {hourMainCard}\r\n                    </div>\r\n                    <div className=\"right-side\">\r\n                        {minorCard(6)}\r\n                    </div>\r\n                </div>\r\n            )\r\n            break;\r\n        case 3: \r\n            pageInfo = (\r\n                <div className=\"data-cards\">\r\n                    {statisticsCard[0]}\r\n                    {minorCard(40)}\r\n                    <div className=\"shadow\"></div>\r\n                </div>\r\n                )\r\n            break;\r\n        case 4: \r\n            pageInfo = (\r\n                <div className=\"about-info\">\r\n                    <span>Nothing to see here!</span>\r\n                </div>\r\n            )\r\n            break;\r\n        default:\r\n            \r\n            break;\r\n    }\r\n\r\n    const loader = (\r\n        <div class=\"loader-container action-loading d-none\" id=\"action-loading\">\r\n            <div class=\"loading-container\">\r\n                <div class=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    const pageContainer = pages.map((pageName, index) => (\r\n        <div className={(index + 1) === pageActive ? `pages ${pageName}-page active-page` : `pages ${pageName}-page`}>\r\n            {pageInfo}\r\n        </div>\r\n    ))\r\n    return  <div className=\"page-container\">\r\n                {pageLoaded ? pageContainer : loader}\r\n            </div>\r\n}\r\n\r\nexport default Pages",{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","severity":1,"message":"47","line":2,"column":8,"nodeType":"48","messageId":"49","endLine":2,"endColumn":9},{"ruleId":"46","severity":1,"message":"50","line":2,"column":13,"nodeType":"48","messageId":"49","endLine":2,"endColumn":22},{"ruleId":"46","severity":1,"message":"51","line":3,"column":8,"nodeType":"48","messageId":"49","endLine":3,"endColumn":12},{"ruleId":"46","severity":1,"message":"52","line":126,"column":9,"nodeType":"48","messageId":"49","endLine":126,"endColumn":22},{"ruleId":"53","severity":1,"message":"54","line":184,"column":27,"nodeType":"55","messageId":"56","endLine":184,"endColumn":29},{"ruleId":"53","severity":1,"message":"54","line":203,"column":35,"nodeType":"55","messageId":"56","endLine":203,"endColumn":37},{"ruleId":"53","severity":1,"message":"54","line":205,"column":33,"nodeType":"55","messageId":"56","endLine":205,"endColumn":35},{"ruleId":"46","severity":1,"message":"57","line":5,"column":20,"nodeType":"48","messageId":"49","endLine":5,"endColumn":30},{"ruleId":"46","severity":1,"message":"58","line":8,"column":13,"nodeType":"48","messageId":"49","endLine":8,"endColumn":19},{"ruleId":"46","severity":1,"message":"59","line":9,"column":13,"nodeType":"48","messageId":"49","endLine":9,"endColumn":21},{"ruleId":"46","severity":1,"message":"60","line":11,"column":13,"nodeType":"48","messageId":"49","endLine":11,"endColumn":23},{"ruleId":"46","severity":1,"message":"61","line":19,"column":13,"nodeType":"48","messageId":"49","endLine":19,"endColumn":18},{"ruleId":"46","severity":1,"message":"62","line":56,"column":9,"nodeType":"48","messageId":"49","endLine":56,"endColumn":19},{"ruleId":"53","severity":1,"message":"54","line":145,"column":17,"nodeType":"63","messageId":"64","endLine":145,"endColumn":23},"no-native-reassign",["65"],"no-negated-in-lhs",["66"],"no-unused-vars","'$' is defined but never used.","Identifier","unusedVar","'cssNumber' is defined but never used.","'logo' is defined but never used.","'newWeatherApi' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'numOfPages' is assigned a value but never used.","'cityId' is assigned a value but never used.","'listData' is assigned a value but never used.","'dataUpdate' is assigned a value but never used.","'width' is assigned a value but never used.","'nightImage' is assigned a value but never used.","ReturnStatement","expectedReturnValue","no-global-assign","no-unsafe-negation"]